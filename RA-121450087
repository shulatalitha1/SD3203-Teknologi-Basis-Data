# Implementasi Ulang "Tiga Cara Menyimpan dan Mengakses Banyak Gambar di Python"

Laporan ini menyediakan implementasi ulang dari artikel "Three Ways of Storing and Accessing Lots of Images in Python" dari Real Python. Tujuannya adalah untuk menjelaskan setiap metode dengan cara yang jelas dan singkat, menunjukkan bagaimana menyimpan dan mengakses set gambar besar secara efisien di Python.

## Daftar Isi

1. [Pendahuluan](#pendahuluan)
2. [Metode 1: Menggunakan Sistem Berkas](#metode-1-menggunakan-sistem-berkas)
3. [Metode 2: Menggunakan SQLite](#metode-2-menggunakan-sqlite)
4. [Metode 3: Menggunakan HDF5](#metode-3-menggunakan-hdf5)
5. [Kesimpulan](#kesimpulan)

## Pendahuluan

Menyimpan dan mengakses sejumlah besar gambar dengan efisien sangat penting untuk banyak aplikasi, seperti pembelajaran mesin, analisis data, dan pengembangan web. Laporan ini mengeksplorasi tiga metode untuk menangani penyimpanan dan pengambilan gambar di Python:
1. Menggunakan sistem berkas.
2. Menggunakan database SQLite.
3. Menggunakan berkas HDF5.

Setiap metode memiliki kelebihan dan kasus penggunaannya sendiri, yang akan dijelaskan secara detail di bagian berikut.

## Metode 1: Menggunakan Sistem Berkas

### Langkah-langkah

1. **Mengorganisir Gambar dalam Direktori:**
   - Buat direktori untuk mengkategorikan gambar secara logis, misalnya berdasarkan tipe gambar atau sumber.

2. **Menyimpan Gambar:**
   - Gunakan modul `os` Python untuk membuat direktori jika belum ada.
   - Simpan gambar menggunakan pustaka seperti `PIL` (Python Imaging Library) atau `opencv`.

3. **Mengakses Gambar:**
   - Gunakan modul `glob` untuk mencantumkan semua berkas gambar dalam direktori.
   - Muat gambar sesuai kebutuhan untuk diproses.

### Contoh

```python
import os
from PIL import Image
import glob

# Buat direktori
os.makedirs('images', exist_ok=True)

# Simpan gambar
image = Image.new('RGB', (100, 100), color = 'red')
image.save('images/red_image.jpg')

# Daftar gambar
image_files = glob.glob('images/*.jpg')

# Muat dan proses gambar
for image_file in image_files:
    img = Image.open(image_file)
    img.show()
```

### Kelebihan
- Sederhana dan mudah dimengerti.
- Mudah dikelola dan diakses file individual.

### Kekurangan
- Bisa menjadi tidak terorganisir dengan banyaknya gambar.
- Waktu akses lebih lambat dibandingkan sistem basis data.

## Metode 2: Menggunakan SQLite

### Langkah-langkah

1. **Membuat Database SQLite:**
   - Gunakan modul `sqlite3` untuk membuat berkas database.

2. **Menyimpan Gambar sebagai Data Biner:**
   - Konversikan gambar ke data biner dan simpan dalam tabel.

3. **Mengambil Gambar:**
   - Query database dan konversikan data biner kembali ke gambar.

### Contoh

```python
import sqlite3
from PIL import Image
import io

# Buat koneksi database
conn = sqlite3.connect('images.db')
c = conn.cursor()

# Buat tabel
c.execute('''CREATE TABLE IF NOT EXISTS images
             (id INTEGER PRIMARY KEY, name TEXT, data BLOB)''')

# Simpan gambar
image = Image.new('RGB', (100, 100), color = 'blue')
img_byte_arr = io.BytesIO()
image.save(img_byte_arr, format='JPEG')
img_byte_arr = img_byte_arr.getvalue()

c.execute("INSERT INTO images (name, data) VALUES (?, ?)", ('blue_image', img_byte_arr))
conn.commit()

# Ambil gambar
c.execute("SELECT data FROM images WHERE name=?", ('blue_image',))
img_data = c.fetchone()[0]
img = Image.open(io.BytesIO(img_data))
img.show()

conn.close()
```

### Kelebihan
- Organisasi yang lebih baik untuk sejumlah besar gambar.
- Lebih mudah untuk meng-query dan mengelola metadata.

### Kekurangan
- Sedikit lebih kompleks dibandingkan penggunaan sistem berkas.
- Performa bisa menurun dengan dataset yang sangat besar.

## Metode 3: Menggunakan HDF5

### Langkah-langkah

1. **Membuat Berkas HDF5:**
   - Gunakan pustaka `h5py` untuk membuat berkas HDF5.

2. **Menyimpan Gambar sebagai Dataset:**
   - Simpan gambar sebagai dataset dalam berkas HDF5.

3. **Mengakses Gambar:**
   - Ambil gambar dari berkas HDF5 sesuai kebutuhan.

### Contoh

```python
import h5py
import numpy as np
from PIL import Image

# Buat berkas HDF5
hdf5_file = h5py.File('images.h5', 'w')

# Simpan gambar
image = Image.new('RGB', (100, 100), color = 'green')
image_data = np.array(image)
hdf5_file.create_dataset('green_image', data=image_data)

# Ambil gambar
retrieved_image_data = hdf5_file['green_image'][:]
retrieved_image = Image.fromarray(retrieved_image_data)
retrieved_image.show()

hdf5_file.close()
```

### Kelebihan
- Sangat efisien untuk dataset besar.
- Mendukung struktur data dan metadata yang kompleks.

### Kekurangan
- Lebih kompleks untuk diatur dan digunakan.
- Memerlukan pemahaman tentang format HDF5.

## Kesimpulan

Memilih metode yang tepat untuk menyimpan dan mengakses gambar di Python tergantung pada kebutuhan spesifik aplikasi Anda. Untuk kasus penggunaan sederhana, sistem berkas sudah cukup. Untuk organisasi yang lebih baik dan kemampuan query, SQLite adalah pilihan yang baik. Untuk menangani dataset besar dengan efisien, HDF5 menawarkan kinerja dan fleksibilitas yang superior.
